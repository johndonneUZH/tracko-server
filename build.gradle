plugins {
    id 'org.springframework.boot' version '3.3.12'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('Application')
}

dependencies {
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    implementation 'com.google.cloud:google-cloud-secretmanager:2.30.0'
    
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.mongodb:mongodb-driver-sync:4.6.0'
    implementation 'org.mongodb:mongodb-driver-core:4.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.yaml:snakeyaml:2.0'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-crypto:6.4.4'
    implementation 'org.springframework.security:spring-security-config:6.4.4'
    implementation 'org.springframework.security:spring-security-core:6.4.4'
    implementation 'org.springframework.security:spring-security-web:6.4.4'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-web:6.1.14'
    implementation 'org.springframework:spring-webmvc:6.1.14'
    implementation 'org.springframework:spring-context:6.1.14'
    implementation 'org.springframework:spring-expression:6.1.14'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.google.protobuf:protobuf-java:4.28.2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // --- Test dependencies ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // includes test-autoconfigure
    testImplementation 'de.bwaldvogel:mongo-java-server:1.39.0'            // embedded Mongo for tests
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // -------------------------

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:stomp-websocket:2.3.4'
    implementation 'org.webjars:sockjs-client:1.5.1'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
  properties {
    property "sonar.projectKey", "johndonneUZH_sopra-fs25-group-46-server"
    property "sonar.organization", "johndonneuzh"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
    testLogging {
        events "passed", "skipped", "failed"
    }
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

defaultTasks 'bootJar', 'build'
